import type { DeepRequired } from 'utility-types';
export type Form = {
  buyWay: number;
  frequencyVal: string;
  frequencyName: string;
  frequencyId: number;
};
export type Details = DeepRequired<{
  id: string;
  goodsName: string;
  goodsDescription?: any;
  sizeList: SizeList[];
  images: any[];
  goodsSpecDetails: GoodsSpecDetail[];
  goodsSpecs: GoodsSpec[];
  taggingForText?: any;
  taggingForImage?: any;
  fromPrice: number;
  toPrice: number;
  isSkuNoQuery: boolean;
  goods: Goods;
  promotions: string;
  goodsDescriptionDetailList: GoodsDescriptionDetailList[];
  defaultFrequencyId: number;
  goodsId: string;
  cateId: number;
  brandId: number;
  brandName?: any;
  goodsSubtitle: string;
  goodsNewSubtitle: string;
  goodsDescriptionDetails?: any;
  goodsNo: string;
  innerGoodsNo: string;
  goodsUnit?: any;
  goodsCateName: string;
  goodsImg: string;
  goodsWeight: number;
  marketPrice?: any;
  supplyPrice?: any;
  goodsType: number;
  costPrice?: any;
  createTime: string;
  updateTime: string;
  addedTime: string;
  goodsSource: number;
  delFlag: number;
  addedFlag: number;
  moreSpecFlag: number;
  priceType: number;
  customFlag: number;
  levelDiscountFlag: number;
  companyInfoId: number;
  supplierName: string;
  storeId: number;
  storeName?: any;
  cateName?: any;
  submitTime: string;
  auditStatus: number;
  auditReason?: any;
  goodsDetail: string;
  goodsMobileDetail?: any;
  stock?: any;
  goodsInfoIds?: any;
  storeCateIds?: any;
  storeCateNames?: any;
  companyType: number;
  goodsCubage: number;
  freightTempId: number;
  freightTempName: string;
  saleType: number;
  goodsVideo?: any;
  linePrice?: any;
  allowPriceSet: number;
  goodsEvaluateNum: number;
  goodsCollectNum: number;
  goodsSalesNum: number;
  goodsFavorableCommentNum: number;
  grouponForbiddenFlag: boolean;
  subscriptionStatus: number;
  minMarketPrice: number;
  minSubscriptionPrice: number;
  avgEvaluate?: any;
  avgEvaluateScore?: any;
  baseSpec?: any;
  saleableFlag: number;
  displayFlag: number;
  weShareId?: any;
  weightValue: string;
  goodsStoreCateNames?: any;
  productCategoryNames?: any;
  defaultPurchaseType: number;
  resource: number;
  goodsPillar?: any;
  exclusiveFlag: number;
  wsEnergyCategory?: any;
  wsReferenceEnergyValue?: any;
  wsTechnologyCode?: any;
  wsDensity?: any;
  sourceCreateTime?: any;
  sourceUpdateTime: string;
  serviceTypeId?: any;
  assignResources?: any;
  isTopPlp: number;
  goodsInfos: SizeList[];
  goodsAttributesValueRelList: GoodsAttributesValueRelList[];
}>;

interface GoodsAttributesValueRelList {
  id: string;
  goodsId: string;
  goodsAttributeId: string;
  goodsAttributeValueId: string;
  goodsAttributeName: string;
  goodsAttributeNameEn: string;
  goodsAttributeValue: string;
  goodsAttributeValueEn: string;
  createTime: string;
  updateTime?: any;
  delTime?: any;
  delFlag: boolean;
  dataSource: number;
}

interface GoodsDescriptionDetailList {
  id: string;
  goodsCateId: number;
  goodsId: string;
  descriptionId: string;
  descriptionName: string;
  displayName: string;
  contentType: string;
  editable: boolean;
  content: string;
  sort: number;
  status: boolean;
  storeId: number;
  createTime: string;
  updateTime?: any;
  delTime?: any;
  delFlag: boolean;
  translateList: TranslateList[];
}

interface TranslateList {
  id: string;
  languageId: string;
  name: string;
  translateName: string;
  sort: number;
  storeId: number;
  createTime: string;
  updateTime?: any;
  delTime?: any;
  delFlag: boolean;
}

interface Goods {
  goodsId: string;
  cateId: number;
  brandId: number;
  brandName?: any;
  goodsName: string;
  goodsSubtitle: string;
  goodsNewSubtitle: string;
  goodsDescription?: any;
  goodsDescriptionDetails?: any;
  goodsNo: string;
  innerGoodsNo: string;
  goodsUnit?: any;
  goodsCateName: string;
  goodsImg: string;
  goodsWeight: number;
  marketPrice?: any;
  supplyPrice?: any;
  goodsType: number;
  costPrice?: any;
  createTime: string;
  updateTime: string;
  addedTime: string;
  goodsSource: number;
  delFlag: number;
  addedFlag: number;
  moreSpecFlag: number;
  priceType: number;
  customFlag: number;
  levelDiscountFlag: number;
  companyInfoId: number;
  supplierName: string;
  storeId: number;
  storeName?: any;
  cateName?: any;
  submitTime: string;
  auditStatus: number;
  auditReason?: any;
  goodsDetail: string;
  goodsMobileDetail?: any;
  stock?: any;
  goodsInfoIds?: any;
  storeCateIds?: any;
  storeCateNames?: any;
  companyType: number;
  goodsCubage: number;
  freightTempId: number;
  freightTempName: string;
  saleType: number;
  goodsVideo?: any;
  linePrice?: any;
  allowPriceSet: number;
  goodsEvaluateNum: number;
  goodsCollectNum: number;
  goodsSalesNum: number;
  goodsFavorableCommentNum: number;
  grouponForbiddenFlag: boolean;
  subscriptionStatus: number;
  minMarketPrice: number;
  minSubscriptionPrice: number;
  avgEvaluate?: any;
  avgEvaluateScore?: any;
  baseSpec?: any;
  saleableFlag: number;
  displayFlag: number;
  weShareId?: any;
  weightValue: string;
  goodsStoreCateNames?: any;
  productCategoryNames?: any;
  defaultPurchaseType: number;
  defaultFrequencyId: number;
  resource: number;
  promotions: string;
  goodsPillar?: any;
  exclusiveFlag: number;
  wsEnergyCategory?: any;
  wsReferenceEnergyValue?: any;
  wsTechnologyCode?: any;
  wsDensity?: any;
  sourceCreateTime?: any;
  sourceUpdateTime: string;
  serviceTypeId?: any;
  assignResources?: any;
  isTopPlp: number;
}

interface GoodsSpec {
  specId: number;
  goodsId: string;
  specName: string;
  createTime: string;
  updateTime: string;
  delFlag: number;
  mockSpecId: number;
  specDetailIds: number[];
  editable?: any;
  chidren: GoodsSpecDetail[];
}

interface GoodsSpecDetail {
  specDetailId: number;
  goodsId: string;
  specId: number;
  detailName: string;
  createTime: string;
  updateTime: string;
  delFlag: number;
  mockSpecId: number;
  mockSpecDetailId: number;
  calculateSort: number;
  editable?: any;
  isSelected?: boolean;
  goodsInfoUnit: string;
  isEmpty: boolean;
  isUnitPriceZero: boolean;
  isDisabled: boolean;
  canSelectedOutOfStock: boolean;
  selected: boolean;
}

interface SizeList {
  goodsInfoId: string;
  goodsId: string;
  goodsInfoName: string;
  goodsInfoNo: string;
  innerGoodsInfoNo: string;
  goodsInfoImg?: any;
  goodsInfoBarcode?: string;
  stock: number;
  marketPrice: number;
  marketPriceExclVat?: any;
  supplyPrice?: any;
  retailPrice?: any;
  grouponPrice?: any;
  costPrice?: any;
  createTime: string;
  updateTime: string;
  addedTime: string;
  delFlag: number;
  addedFlag: number;
  companyInfoId: number;
  storeId: number;
  storeName?: any;
  customFlag: number;
  levelDiscountFlag: number;
  auditStatus: number;
  companyType: number;
  aloneFlag: boolean;
  salePrice: number;
  priceType: number;
  mockSpecIds: number[];
  mockSpecDetailIds: number[];
  specDetailRelIds?: any;
  buyCount: number;
  count?: any;
  maxCount?: any;
  intervalPriceIds: any[];
  specText: string;
  intervalMinPrice?: any;
  intervalMaxPrice?: any;
  validFlag?: any;
  cateId: number;
  cateName?: any;
  isHidden?: any;
  brandId: number;
  storeCateIds?: any;
  distributionCommission?: any;
  commissionRate?: any;
  distributionSalesCount?: any;
  distributionGoodsAudit: number;
  distributionGoodsAuditReason?: any;
  checked: boolean;
  goodsStatus: number;
  goodsUnit?: any;
  marketingLabels: any[];
  grouponLabel?: any;
  couponLabels: any[];
  goodsCubage?: any;
  goodsWeight?: any;
  freightTempId?: any;
  saleType: number;
  allowPriceSet?: any;
  smallProgramCode?: any;
  joinDistributior?: any;
  goodsEvaluateNum?: any;
  goodsCollectNum?: any;
  goodsSalesNum?: any;
  goodsFavorableCommentNum?: any;
  enterPrisePrice?: any;
  enterPriseAuditState?: any;
  enterPriseGoodsAuditReason?: any;
  subscriptionStatus: number;
  subscriptionPrice: number;
  linePrice: number;
  basePrice?: any;
  subscriptionBasePrice?: any;
  basePriceType: string;
  goodsInfoWeight: number;
  goodsInfoUnit: string;
  goods?: any;
  goodsPromotion?: any;
  description?: any;
  auditCatFlag?: any;
  prescriberFlag?: any;
  goodsMeasureNum?: any;
  goodsMeasureUnit: string;
  subscriptionDiscountPrice: number;
  goodsInfoFlag?: any;
  periodTypeId?: any;
  purchasePrice?: string;
  purchasePriceExclVat?: any;
  goodsInfoType?: any;
  goodsInfoBundleRels: any[];
  recommendationId?: any;
  recommendationName?: any;
  recommendationSerialCode?: any;
  weShareScode?: any;
  packSize: string;
  subscriptionPercentage: string;
  maxStock?: any;
  subscriptionPlanId?: any;
  packageId?: any;
  subscriptionPlanPromotionFlag?: any;
  settingPrice?: any;
  virtualInventory?: any;
  virtualAlert?: any;
  marketingCode?: any;
  marketingName?: any;
  promotionDiscountPrice?: any;
  marketingId?: any;
  externalSku: string;
  promotions: string;
  isOfflineStore?: any;
  petsId?: any;
  petsType?: any;
  questionParams?: any;
  referenceData?: any;
  depth: number;
  depthUnit: string;
  width: number;
  widthUnit: string;
  height: number;
  heightUnit: string;
  specification?: any;
  isNotShowCart?: any;
  externalStock: number;
  externalMarketPrice?: any;
  externalSubscriptionPrice?: any;
  externalLinePrice?: any;
  externalPurchasePrice?: any;
  factor: number;
  stockUomId?: string;
  priceUomId: string;
  priceUom?: any;
  stockUom?: any;
  defaultSku?: number;
  displayOnShop?: number;
  productCategory?: any;
  cateRate?: any;
  selected: boolean;
}

export type UserInfo = DeepRequired<{
  address1?: any;
  address2?: any;
  postalCode?: any;
  communicationPhone: string;
  communicationEmail: string;
  communicationPrint: string;
  customerDetailId: string;
  customerId: string;
  customerAccount: string;
  customerName: string;
  customerLevelName: string;
  countryId?: any;
  provinceId?: any;
  province?: any;
  cityId?: any;
  areaId?: any;
  customerAddress?: any;
  contactName: string;
  contactPhone?: any;
  employeeName: string;
  birthDay?: any;
  gender?: any;
  isEnterpriseCustomer: boolean;
  enterpriseInfo?: any;
  firstName: string;
  lastName: string;
  firstNameKatakana?: any;
  lastNameKatakana?: any;
  email: string;
  country?: any;
  contactMethod?: any;
  timezone?: any;
  appartmentNo?: any;
  district?: any;
  state?: any;
  region?: any;
  housing?: any;
  house?: any;
  department?: any;
  city?: any;
  postCode?: any;
  reference?: any;
  clinicsVOS?: any;
  defaultClinics?: any;
  county?: any;
}>;

export type SelectedSpecItem = DeepRequired<{
  goodsInfoId: string;
  goodsId: string;
  goodsInfoName: string;
  goodsInfoNo: string;
  innerGoodsInfoNo: string;
  goodsInfoImg?: any;
  goodsInfoBarcode: string;
  stock: number;
  marketPrice: number;
  marketPriceExclVat?: any;
  supplyPrice?: any;
  retailPrice?: any;
  grouponPrice?: any;
  costPrice?: any;
  createTime: string;
  updateTime: string;
  addedTime: string;
  delFlag: number;
  addedFlag: number;
  companyInfoId: number;
  storeId: number;
  storeName?: any;
  customFlag: number;
  levelDiscountFlag: number;
  auditStatus: number;
  companyType: number;
  aloneFlag: boolean;
  salePrice: number;
  priceType: number;
  mockSpecIds: number[];
  mockSpecDetailIds: number[];
  specDetailRelIds?: any;
  buyCount: number;
  count?: any;
  maxCount?: any;
  intervalPriceIds: any[];
  specText: string;
  intervalMinPrice?: any;
  intervalMaxPrice?: any;
  validFlag?: any;
  cateId: number;
  cateName?: any;
  isHidden?: any;
  brandId: number;
  storeCateIds?: any;
  distributionCommission?: any;
  commissionRate?: any;
  distributionSalesCount?: any;
  distributionGoodsAudit: number;
  distributionGoodsAuditReason?: any;
  checked: boolean;
  goodsStatus: number;
  goodsUnit?: any;
  marketingLabels: any[];
  grouponLabel?: any;
  couponLabels: any[];
  goodsCubage?: any;
  goodsWeight?: any;
  freightTempId?: any;
  saleType: number;
  allowPriceSet?: any;
  smallProgramCode?: any;
  joinDistributior?: any;
  goodsEvaluateNum?: any;
  goodsCollectNum?: any;
  goodsSalesNum?: any;
  goodsFavorableCommentNum?: any;
  enterPrisePrice?: any;
  enterPriseAuditState?: any;
  enterPriseGoodsAuditReason?: any;
  subscriptionStatus: number;
  subscriptionPrice: number;
  linePrice: number;
  basePrice?: any;
  subscriptionBasePrice?: any;
  basePriceType: string;
  goodsInfoWeight: number;
  goodsInfoUnit: string;
  goods?: any;
  goodsPromotion?: any;
  description?: any;
  auditCatFlag?: any;
  prescriberFlag?: any;
  goodsMeasureNum?: any;
  goodsMeasureUnit: string;
  subscriptionDiscountPrice: number;
  goodsInfoFlag?: any;
  periodTypeId?: any;
  purchasePrice: string;
  purchasePriceExclVat?: any;
  goodsInfoType?: any;
  goodsInfoBundleRels: any[];
  recommendationId?: any;
  recommendationName?: any;
  recommendationSerialCode?: any;
  weShareScode?: any;
  packSize: string;
  subscriptionPercentage: string;
  maxStock?: any;
  subscriptionPlanId?: any;
  packageId?: any;
  subscriptionPlanPromotionFlag?: any;
  settingPrice?: any;
  virtualInventory?: any;
  virtualAlert?: any;
  marketingCode?: any;
  marketingName?: any;
  promotionDiscountPrice?: any;
  marketingId?: any;
  externalSku: string;
  promotions: string;
  isOfflineStore?: any;
  petsId?: any;
  petsType?: any;
  questionParams?: any;
  referenceData?: any;
  depth: number;
  depthUnit: string;
  width: number;
  widthUnit: string;
  height: number;
  heightUnit: string;
  specification?: any;
  isNotShowCart?: any;
  externalStock: number;
  externalMarketPrice?: any;
  externalSubscriptionPrice?: any;
  externalLinePrice?: any;
  externalPurchasePrice?: any;
  factor: number;
  stockUomId: string;
  priceUomId: string;
  priceUom?: any;
  stockUom?: any;
  defaultSku?: any;
  displayOnShop?: any;
  productCategory?: any;
  cateRate?: any;
  selected: boolean;
}>;
